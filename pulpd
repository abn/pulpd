#!/usr/bin/env bash

# required for control
shopt -s extglob

## defaults
CONFIG=/etc/pulpd.conf
DROOT=/var/lib/pulpd/data
CID=/var/run/pulpd.containers

IMAGE_BASE=pulp/base
IMAGE_WORKER=pulp/worker
IMAGE_QPID=pulp/qpid
IMAGE_DB=pulp/mongodb
IMAGE_HTTPD=pulp/apache
IMAGE_CRANE=pulp/crane-allinone
IMAGE_ADMIN=pulp/admin-client

CONTAINER_NAME_PREFIX="pulpd-"
PULP_LOG_DIR=/var/log/pulp
PULP_WORKERS=2
PULP_HOSTNAME=pulpapi

PULP_DB_PORT=27017
PULP_QPID_PORT=5672
PULP_HTTP_PORT=80
PULP_HTTPS_PORT=443
PULP_CRANE_HTTP_PORT=5000

## pupld control function defintions

# check if a directory exists, and if not, make it
function ensure_dir {
    if [ ! -d $DROOT$1 ]
    then
        echo creating $DROOT$1
        mkdir -p $DROOT$1
    fi
    chcon -Rt svirt_sandbox_file_t $DROOT$1
}

function prepare_environment() {
    touch ${CID}

    if [ ! -d ${DROOT} ]; then
        echo 1>&2 "${DROOT} is not a directory" && exit 1
    fi

    # make sure all of these directories exist
    for DIR in \
        "${PULP_LOG_DIR}" "${PULP_LOG_DIR}/httpd-pulpapi" "${PULP_LOG_DIR}/httpd-crane"; do
        ensure_dir "${DIR}"
    done

    LINKS=""
    for LINK in qpid db; do
        LINKS="${LINKS} --link ${CONTAINER_NAME_PREFIX}${LINK}:${LINK}"
    done

    MOUNTS="--volume /dev/log:/dev/log"
    for MOUNT in "/etc/pulp" "/etc/pki/pulp" "/var/lib/pulp"; do
        ensure_dir ${MOUNT}
        MOUNTS="${MOUNTS} --volume ${DROOT}${MOUNT}:${MOUNT}"
    done
}

function show_envrionment() {
    cat << EOF

###################
pulpd: environment
###################

CONFIG: ${CONFIG}
DROOT: ${DROOT}
CID: ${CID}

-----------
pulp config
-----------
PULP_LOG_DIR: ${PULP_LOG_DIR}
PULP_WORKERS: ${PULP_WORKERS}
PULP_HOSTNAME: ${PULP_HOSTNAME}
PULP_DB_PORT: ${PULP_DB_PORT}
PULP_QPID_PORT: ${PULP_QPID_PORT}
PULP_HTTP_PORT: ${PULP_HTTP_PORT}
PULP_HTTPS_PORT: ${PULP_HTTPS_PORT}
PULP_CRANE_HTTP_PORT: ${PULP_CRANE_HTTP_PORT}

-------------
docker images
-------------
BASE: ${IMAGE_BASE}
WORKER: ${IMAGE_WORKER}
QPID: ${IMAGE_QPID}
DB: ${IMAGE_DB}
HTTPD: ${IMAGE_HTTPD}
CRANE: ${IMAGE_CRANE}

---------------------
docker runtime config
---------------------
CONTAINER_NAME_PREFIX: ${CONTAINER_NAME_PREFIX}
MOUNTS: ${MOUNTS}
LINKS: ${LINKS}

EOF
}

function docker_run() {
    NAME=${CONTAINER_NAME_PREFIX}$1
    shift

    if docker start ${NAME} 2> /dev/null; then
        echo "Reusing container for ${NAME}"
        echo "${NAME}" >> ${CID}
    else
        echo "Starting new named container ${NAME}"
        { docker run -d --name ${NAME} $@ \
            && echo "${NAME}" >> ${CID}; } || docker rm ${NAME} > /dev/null 2>&1
    fi

}

function docker_stop() {
    # we expect the names to already contain the ${CONTAINER_NAME_PREFIX}
    NAME=${1}
    docker stop ${NAME} > /dev/null 2>&1 && echo "Stopped ${NAME}"
    docker rm ${NAME} > /dev/null 2>&1 \
        && sed -i /"${NAME}"/d ${CID} \
        && echo "Removed name ${NAME}"
}

function control_workers() {
    COUNTER=1
    while [  ${COUNTER} -le ${PULP_WORKERS} ]; do
        control $1 worker${COUNTER}
        let COUNTER=COUNTER+1
    done 
}

function control() {
    case "$1" in
        start)
            case "$2" in
                db)
                    docker_run db  -p ${PULP_DB_PORT}:27017 ${IMAGE_DB} \
                        && sed -i /"${CONTAINER_NAME_PREFIX}db"/d ${CID} ;;
                qpid)
                    docker_run qpid -p ${PULP_QPID_PORT}:5672 ${IMAGE_QPID} \
                        && sed -i /"${CONTAINER_NAME_PREFIX}qpid"/d ${CID} ;;
                beat|resource_manager)
                    docker_run $2 $MOUNTS $LINKS ${IMAGE_WORKER} $2 ;;
                worker+([0-9]))
                    docker_run $2 $MOUNTS $LINKS ${IMAGE_WORKER} worker ${2/worker/} ;;
                workers)
                    control_workers start ;;
                pulpapi)
                    docker_run pulpapi \
                        ${MOUNTS} \
                        -v ${DROOT}/${PULP_LOG_DIR}/httpd-pulpapi:/var/log/httpd \
                        ${LINKS} \
                        --hostname ${PULP_HOSTNAME} \
                        -p ${PULP_HTTPS_PORT}:443 -p ${PULP_HTTP_PORT}:80 \
                        ${IMAGE_HTTPD} ;;
                crane)
                    docker_run crane \
                        ${MOUNTS} \
                        -v ${DROOT}/${PULP_LOG_DIR}/httpd-crane:/var/log/httpd \
                        -p ${PULP_CRANE_HTTP_PORT}:80 ${IMAGE_CRANE} ;;
                all)
                    start ;;
                "")
                    echo 1>&2 "control start requires an argument"; exit 1 ;;
                *)
                    echo 1>&2 "unknown argument to control start"; exit 1 ;;
            esac ;;
        stop)
            case "$2" in
                workers)
                    control_workers start ;;
                all)
                    stop
                    for container in qpid db; do
                        control stop ${container}
                    done ;;
                "")
                    echo 1>&2 "control stop requires an argument"; exit 1 ;;
                *)
                    docker_stop ${CONTAINER_NAME_PREFIX}$2 ;;
            esac ;;
        status)
            case "$2" in
                workers)
                    control_workers status ;;
                all)
                    status ;;
                *)
                    docker ps | grep ${CONTAINER_NAME_PREFIX}$2 ;;
            esac ;;
        pull)
            for image in ${IMAGE_BASE} ${IMAGE_WORKER} ${IMAGE_DB} \
                ${IMAGE_QPID} ${IMAGE_CRANE} ${IMAGE_HTTPD} ${IMAGE_ADMIN}; do
                docker pull ${image}
            done ;;
    esac
}

function start() {
    if [ ! -f ${DROOT}/etc/pulp/server.conf ]; then
        echo 1>&2 "Cannot start server before setup is complete."
        exit 1
    fi
 
    # stop any running containers
    stop
    
    # start all containers
    control start db
    control start qpid
    control start beat
    control start resource_manager
    control start workers
    control start pulpapi
    control start crane
}

function stop() {
    if [ -f ${CID} ]; then
        while read name; do
            docker_stop $name
        done <${CID}
    fi
}

function status() {
    # this simply displays docker ps; should probably do something smarter
    docker ps | grep pulp
}

function setup() {
    # start db and qpid if not already running
    control start db
    control start qpid
    
    docker run -it --rm $LINKS $MOUNTS \
        --hostname ${PULP_HOSTNAME} \
        ${IMAGE_BASE} bash -c /setup.sh
}

## pulpd main section

function usage() {
    cat << EOF

Usage:
 $0 [options] <command>

Options:
 -c, --config <config>  Config file to source environment from (default: ${CONFIG})
 -d, --droot <droot>    The docker root directory to use (default: ${DROOT})
 -h, --help             Show this help message

Commands:
 setup      Command to trigger initial setup and spit out boiler-plate config docker dir
 start      Start all containers
 stop       Stop all containers except database and qpid
 restart    Same as executing stop followed by start
 status     Show docker ps for pulp containers
 <cmd>-<cn> Run command (start|stop|status) for container; where cn is the container name
 shutdown   Stop everything
 show       Show pulpd environment
 control    Internal control command for advanced usage
 pull       Pull all imaged (triggers an update for any out dated images)

Container names:
db, qpid, beat, resource_manager, worker<id>, pulpapi, crane

The control command usage:

 control start <container>
 control stop <container>
 control status <container>

 If 'workers' is used all running workers will be affected. For specific worker,
 use 'worker<id>'.

 To affect all containers; use 'all'.

EOF
}

GETOPT=`getopt -o c:r:h --long config:,root:,help -n "$0" -- "$@"`
eval set -- "${GETOPT}"

while true ; do
    case "$1" in
        -c|--config)
            case "$2" in
                "") shift 2 ;;
                *) CONFIG=$2 ; shift 2 ;;
            esac ;;
        -d|--droot)
            case "$2" in
                "") shift 2 ;;
                *) DROOT_OVERRRID=$2 ; shift 2 ;;
            esac ;;
        -h|--help) usage && exit 0 ;;
        --) shift ; break ;;
        *) echo "Invalid option specified." ; usage; exit 1 ;;
    esac
done

if [ $# -ne 1 ]; then
    # exception for control command
    if [ "$1" == "control" ] && [ $# -ne 3 ] ; then
        echo "control command expects 2 arguments; $(expr $# - 1) were given."
        exit 1
    elif [ "$1" != "control" ]; then
        echo "Single command expected; $# commands were provided."
        exit 1
    fi
fi

## configuration
if [ -f ${CONFIG} ]; then
    source ${CONFIG}
fi

# cli option overrides config
if [ ! -z "${DROOT_OVERRRID}" ]; then
    DROOT=${DROOT_OVERRRID}
fi

DROOT=${DROOT/%\//}

prepare_environment

## command processing
case "$1" in
    setup)
        setup ;;
    start)
        start ;;
    start-+([a-z]|[0-9]))
        control start ${1/start-/} ;;
    stop)
        stop ;;
    stop-+([a-z]|[0-9]))
        control stop ${1/stop-/} ;;
    shutdown)
        control stop all ;;
    restart)
        stop && start ;;
    status)
        status ;;
    status-+([a-z]|[0-9]))
        control status ${1/status-/} ;;
    show)
        show_envrionment ;;
    control)
        control $2 $3 ;;
    admin)
        docker run -it \
            --link ${CONTAINER_NAME_PREFIX}${PULP_HOSTNAME}:${PULP_HOSTNAME} \
            ${IMAGE_ADMIN} ;;
    pull)
        control pull ;;
    *)
        echo "Invalid command specified.";
        usage && exit 1
        ;;
esac
