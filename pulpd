#!/usr/bin/env bash

## defaults
CONFIG=/etc/pulpd.conf
DROOT=/var/lib/pulpd/data
CID=/var/run/pulpd.containers

IMAGE_BASE=pulp/base
IMAGE_WORKER=pulp/worker
IMAGE_QPID=pulp/qpid
IMAGE_DB=pulp/mongodb
IMAGE_HTTPD=pulp/apache
IMAGE_CRANE=pulp/crane-allinone

CONTAINER_NAME_PREFIX="pulpd-"

PULP_LOG_DIR=/var/log/pulp
PULP_WORKERS=2
PULP_HOSTNAME=pulpapi

PULP_DB_PORT=27017
PULP_QPID_PORT=5672
PULP_HTTP_PORT=80
PULP_HTTPS_PORT=443
PULP_CRANE_HTTP_PORT=5000

## pupld control function defintions

# check if a directory exists, and if not, make it
function ensure_dir {
    if [ ! -d $DROOT$1 ]
    then
        echo creating $DROOT$1
        mkdir -p $DROOT$1
    fi
}

function prepare_environment() {
    touch ${CID}

    if [ ! -d ${DROOT} ]; then
        echo 1>&2 "${DROOT} is not a directory" && exit 1
    fi

    # make sure all of these directories exist
    for DIR in \
        "${PULP_LOG_DIR}" "${PULP_LOG_DIR}/httpd-pulpapi" "${PULP_LOG_DIR}/httpd-crane"; do
        ensure_dir "${DIR}"
    done

    LINKS=""
    for LINK in qpid db; do
        LINKS="${LINKS} --link ${CONTAINER_NAME_PREFIX}${LINK}:${LINK}"
    done

    MOUNTS="--volume /dev/log:/dev/log"
    for MOUNT in "/etc/pulp" "/etc/pki/pulp" "/var/lib/pulp"; do
        ensure_dir ${MOUNT}
        MOUNTS="${MOUNTS} --volume ${DROOT}${MOUNT}:${MOUNT}"
    done
}

function docker_run() {
    NAME=${CONTAINER_NAME_PREFIX}$1
    shift

    if docker start ${NAME} 2> /dev/null; then
        echo "Reusing container for ${NAME}"
        echo "${NAME}" >> ${CID}
    else
        echo "Starting new named container ${NAME}"
        { docker run -d --name ${NAME} $@ \
            && echo "${NAME}" >> ${CID}; } || docker rm ${NAME} > /dev/null 2>&1
    fi

}

function docker_stop() {
    # we expect the names to already contain the ${CONTAINER_NAME_PREFIX}
    NAME=${1}
    docker stop ${NAME} > /dev/null 2>&1 && echo "Stopped ${NAME}"
    docker rm ${NAME} > /dev/null 2>&1 \
        && sed -i /"${NAME}"/d ${CID} \
        && echo "Removed name ${NAME}"
}

function start-db() {
    # run as normal but remove from CID
    docker_run db  -p ${PULP_DB_PORT}:27017 ${IMAGE_DB} \
        && sed -i /"${CONTAINER_NAME_PREFIX}db"/d ${CID}
}

function stop-db() {
    docker_stop ${CONTAINER_NAME_PREFIX}db
}

function start-qpid() {
    # run as normal but remove from CID
    docker_run qpid -p ${PULP_QPID_PORT}:5672 ${IMAGE_QPID} \
        && sed -i /"${CONTAINER_NAME_PREFIX}qpid"/d ${CID}
}

function stop-qpid() {
    docker_stop ${CONTAINER_NAME_PREFIX}qpid
}

function start() {
    if [ ! -f ${DROOT}/etc/pulp/server.conf ]; then
        echo 1>&2 "Cannot start server before setup is complete."
        exit 1
    fi
    
    stop
    
    start-db
    start-qpid

    docker_run beat $MOUNTS $LINKS ${IMAGE_WORKER} beat
    docker_run resource_manager $MOUNTS $LINKS ${IMAGE_WORKER} resource_manager

    # workers
    COUNTER=1
    while [  ${COUNTER} -le ${PULP_WORKERS} ]; do
        docker_run worker${COUNTER} $MOUNTS $LINKS ${IMAGE_WORKER} worker ${COUNTER}
        let COUNTER=COUNTER+1
    done
    
    docker_run pulpapi \
        ${MOUNTS} -v ${DROOT}/${PULP_LOG_DIR}/httpd-pulpapi:/var/log/httpd \
        ${LINKS} \
        --hostname ${PULP_HOSTNAME} \
        -p ${PULP_HTTPS_PORT}:443 -p ${PULP_HTTP_PORT}:80 ${IMAGE_HTTPD}

    docker_run crane \
        ${MOUNTS} -v ${DROOT}/${PULP_LOG_DIR}/httpd-crane:/var/log/httpd \
        -p ${PULP_CRANE_HTTP_PORT}:80 ${IMAGE_CRANE}
}

function stop() {
    if [ -f ${CID} ]; then
        while read name; do
            docker_stop $name
        done <${CID}
    fi
}

function status() {
    # this simply displays docker ps; should probably do something smarter
    docker ps | grep pulp
}

function setup() {
    start-db
    start-qpid
    docker run -it --rm $LINKS $MOUNTS \
        --hostname ${PULP_HOSTNAME} \
        ${IMAGE_BASE} bash -c /setup.sh
}

## pulpd main section

function usage() {
    cat << EOF

Usage:
 $0 [options] <command>

Options:
 -c, --config <config>  Config file to source environment from (default: ${CONFIG})
 -d, --droot <droot>    The docker root directory to use (default: ${DROOT})
 -h, --help             Show this help message

Commands:
 setup      Command to trigger initial setup and spit out boiler-plate config docker dir
 start      Start all containers
 stop       Stop all containers except database and qpid
 restart    Same as executing stop followed by start
 status     Show docker ps for pulp containers
 start-db   Start database container
 stop-db    Stop database container
 start-qpid Start qpid container
 stop-qpid  Stop qpid container
 shutdown   Stop everything

EOF
}

GETOPT=`getopt -o c:r:h --long config:,root:,help -n "$0" -- "$@"`
eval set -- "${GETOPT}"

while true ; do
    case "$1" in
        -c|--config)
            case "$2" in
                "") shift 2 ;;
                *) CONFIG=$2 ; shift 2 ;;
            esac ;;
        -d|--droot)
            case "$2" in
                "") shift 2 ;;
                *) DROOT=$2 ; shift 2 ;;
            esac ;;
        -h|--help) usage && exit 0 ;;
        --) shift ; break ;;
        *) echo "Invalid option specified." ; usage; exit 1 ;;
    esac
done

if [ $# -ne 1 ]; then
    echo "Single command expected; $# commands were provided."
    usage && exit 1
fi


## configuration
if [ -f ${CONFIG} ]; then
    echo "Sourcing environment from ${CONFIG}"
    source ${CONFIG}
fi

DROOT=${DROOT/%\//}

prepare_environment

## command procession
case "$1" in
    setup)
        setup
        ;;
    start)
        start
        ;;
    start-db)
        start-db
        ;;
    start-qpid)
        start-qpid
        ;;
    stop)
        stop
        ;;
    stop-db)
        stop-db
        ;;
    stop-qpid)
        stop-qpid
        ;;
    shutdown)
        stop; stop-db; stop-qpid;
        ;;
    restart)
        stop && start
        ;;
    status)
        status
        ;;
    *)
        echo "Invalid command specified.";
        usage && exit 1
        ;;
esac
